#!/usr/bin/env bash

# --- Configuration ---
WORK_MINS=90
BREAK_MINS=20
STATE_FILE="$HOME/.cache/pomodoro.json"
ICON_WORK="🍅"
ICON_BREAK="☕"
ICON_PAUSED="⏸️"

# --- DND Functions ---
enter_work_mode() {
    pactl set-sink-mute @DEFAULT_SINK@ 1 # Mute volume
    dunstctl set-paused true            # Pause notifications
    notify-send -a "Pomodoro" -i "dialog-information" "Work Session" "Time to focus for $WORK_MINS minutes."
}

enter_break_mode() {
    pactl set-sink-mute @DEFAULT_SINK@ 0 # Unmute volume
    dunstctl set-paused false           # Unpause notifications
    notify-send -a "Pomodoro" -i "dialog-information" "Break Time!" "Take a break for $BREAK_MINS minutes."
}

stop() {
    pactl set-sink-mute @DEFAULT_SINK@ 0 # Unmute volume
    dunstctl set-paused false           # Unpause notifications
    notify-send -a "Pomodoro" -i "dialog-information" "Stop Time!" "Timer is stopped!"
    echo "{}" > "$STATE_FILE"
}

# --- State Initialization ---
initialize_state() {
    enter_work_mode
    end_time=$(( $(date +%s) + WORK_MINS * 60 ))
    echo "{\"mode\":\"WORK\", \"end_time\":$end_time}" > "$STATE_FILE"
}

# --- Click Actions ---
case "$1" in
    toggle-pause)
        if [[ ! -f "$STATE_FILE" ]]; then exit 0; fi

        mode=$(jq -r '.mode' "$STATE_FILE")
        if [[ "$mode" == "PAUSED" ]]; then
            # Resume
            remaining_seconds=$(jq -r '.remaining_seconds' "$STATE_FILE")
            new_end_time=$(( $(date +%s) + remaining_seconds ))
            prev_mode=$(jq -r '.prev_mode' "$STATE_FILE")
            echo "{\"mode\":\"$prev_mode\", \"end_time\":$new_end_time}" > "$STATE_FILE"
        else
            # Pause
            end_time=$(jq -r '.end_time' "$STATE_FILE")
            remaining=$(( end_time - $(date +%s) ))
            echo "{\"mode\":\"PAUSED\", \"prev_mode\":\"$mode\", \"remaining_seconds\":$remaining}" > "$STATE_FILE"
        fi
        exit 0
        ;;
    skip)
        if [[ ! -f "$STATE_FILE" ]]; then exit 0; fi

        mode=$(jq -r '.mode' "$STATE_FILE")
        if [[ "$mode" == "WORK" ]]; then
            end_time=$(( $(date +%s) + BREAK_MINS * 60 ))
            enter_break_mode
            echo "{\"mode\":\"BREAK\", \"end_time\":$end_time}" > "$STATE_FILE"
        else
            end_time=$(( $(date +%s) + WORK_MINS * 60 ))
            enter_work_mode
            echo "{\"mode\":\"WORK\", \"end_time\":$end_time}" > "$STATE_FILE"
        fi
        exit 0
        ;;
    stop)
        stop
        exit 0
        ;;
    restart)
        initialize_state
        exit 0
        ;;
esac

# --- Main Display Logic ---

# Initialize if state file doesn't exist
if [[ ! -f "$STATE_FILE" ]]; then
    initialize_state
fi

# Read current state
now=$(date +%s)
mode=$(jq -r '.mode' "$STATE_FILE")
end_time=$(jq -r '.end_time' "$STATE_FILE")
remaining_seconds=0

if [[ "$mode" == "PAUSED" ]]; then
    remaining_seconds=$(jq -r '.remaining_seconds' "$STATE_FILE")
    icon=$ICON_PAUSED
    class="paused"
else
    remaining_seconds=$(( end_time - now ))

    # Check if timer has expired
    if [[ "$remaining_seconds" -le 0 ]]; then
        if [[ "$mode" == "WORK" ]]; then
            # Switch to Break
            enter_break_mode
            end_time=$(( $(date +%s) + BREAK_MINS * 60 ))
            echo "{\"mode\":\"BREAK\", \"end_time\":$end_time}" > "$STATE_FILE"
            remaining_seconds=$(( end_time - now ))
        else
            # Switch to Work
            initialize_state
            end_time=$(jq -r '.end_time' "$STATE_FILE")
            remaining_seconds=$(( end_time - now ))
        fi
    fi

    if [[ "$mode" == "WORK" ]]; then
        icon=$ICON_WORK
        class="work"
    else
        icon=$ICON_BREAK
        class="break"
    fi
fi

# Format the time
mins=$(( remaining_seconds / 60 ))
secs=$(( remaining_seconds % 60 ))
time_format=$(printf "%02d:%02d" $mins $secs)

# Output JSON for Waybar
jq -n -c \
  --arg text "$icon $time_format" \
  --arg tooltip "Mode: $mode - Time Remaining: $time_format" \
  --arg class "$class" \
  '{"text": $text, "tooltip": $tooltip, "class": $class}'

