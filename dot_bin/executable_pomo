#!/bin/bash

# Copyright (c) 2024, Willian de Souza.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

SESSION_TIME="2h"
PAUSE_TIME="20m"
START_TIME=""

SESSION_SECONDS=$(convert_time_to_seconds $SESSION_TIME)
PAUSE_SECONDS=$(convert_time_to_seconds $PAUSE_TIME)

while getopts ":s:p:t:" opt; do
  case $opt in
    s) SESSION_TIME=$OPTARG ;;  # Set session time
    p) PAUSE_TIME=$OPTARG ;;    # Set pause time
    t) START_TIME=$OPTARG ;;    # Set the starting point of the session in HH:MM
    \?) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
    :) echo "Option -$OPTARG requires an argument." >&2; exit 1 ;;
  esac
done

convert_time_to_seconds() {
  local time=$1
  echo "$time" | awk '{
    if ($1 ~ /h$/) { sub("h", "", $1); print $1 * 3600 }
    else if ($1 ~ /m$/) { sub("m", "", $1); print $1 * 60 }
    else { print $1 }
  }'
}

current_time_in_seconds() {
  date +"%H:%M" | awk -F: '{ print ($1 * 3600) + ($2 * 60) }'
}

convert_hhmm_to_seconds() {
  local hhmm=$1
  echo "$hhmm" | awk -F: '{ print ($1 * 3600) + ($2 * 60) }'
}

if [ -n "$START_TIME" ]; then
  START_TIME_SECONDS=$(convert_hhmm_to_seconds "$START_TIME")
  CURRENT_TIME_SECONDS=$(current_time_in_seconds)

  ELAPSED_TIME=$((CURRENT_TIME_SECONDS - START_TIME_SECONDS))

  if [ $ELAPSED_TIME -lt 0 ]; then
    ELAPSED_TIME=$((ELAPSED_TIME + 86400))  # Add 24 hours in seconds
  fi

  SESSION_SECONDS=$((SESSION_SECONDS - ELAPSED_TIME))

  if [ $SESSION_SECONDS -lt 0 ]; then
    echo "The session has already ended!"
    exit 1
  fi
fi

send_notification() {
  notify-send "Pomo - $1"
  paplay /usr/share/sounds/freedesktop/stereo/complete.oga  # Play sound
}

display_remaining_time() {
  local remaining=$1
  while [ $remaining -gt 0 ]; do
    hours=$((remaining / 3600))
    minutes=$(((remaining % 3600) / 60))
    seconds=$((remaining % 60))
    printf "\rRemaining: %02d:%02d:%02d" $hours $minutes $seconds
    sleep 1
    remaining=$((remaining - 1))
  done
  echo ""
}

send_notification "Pomodoro session started for $(date -d@$SESSION_SECONDS -u +%H:%M)"
display_remaining_time $SESSION_SECONDS

send_notification "Time for a break! Rest for $PAUSE_TIME"
display_remaining_time $PAUSE_SECONDS

send_notification "Break is over! Time to get back to work."
