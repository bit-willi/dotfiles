" Ben Mezger
" some configs from:
" https://github.com/rstacruz/vim-opinion/

if has('python3')
  silent! python3 1
endif

source ~/.vim/plugins.vim " include plugs

" default file encoding and unicode
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set bomb                     " vim will put a 'byte order mark' (
                             " or BOM for short) at the start of Unicode files
set fileformats=unix,mac,dos " recognize file formats

set backspace=indent,eol,start " make backspace work like most other apps

" space > tabs
set autoindent
set smartindent
set smarttab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab " insert space character when tab is pressed
set modelines=0
set expandtab " helps with backspacing because of expandtab
set textwidth=80
set autoindent

" options
" opening a new file when the current buffer has unsaved changes causes files " to be hidden instead of closed.
" The unsaved changes can still be accessed by typing :ls and then :b[N],
" where [N] is the number of a buffer
" see: http://usevim.com/2012/10/19/vim101-set-hidden/
set hidden         " don't care about closing modified buffers
set showcmd        " display incomplete commands
set history=50     " keep 50 lines of command line history
let mapleader=','  " use ',' as mapleader
set colorcolumn=80 " Color in column 80
set list listchars=tab:»·,trail:·,nbsp:· " Display extra whitespace
set cursorline     " find cursor faster.
set nowrap       "Don't wrap lines
set linebreak    "Wrap lines at convenient points

               " searching
set hlsearch   " highlight all search matches
set incsearch  " start searching when you type the first character of the search string
set ignorecase " searching is not case sensitive
set smartcase  " when 'ignorecase' and 'smartcase' are both on, if a
               " pattern contains an uppercase letter, it is case sensitive,
               " otherwise, it is not
set gdefault   " sub all matches in a line by default

set binary        " makes Vim more suitable for editing binary files
set shell=/bin/sh " use sh as default shell

" programming
syntax on
set cindent          " enables automatic indenting c-style
set cinoptions=l1,j1 " affects the way cindent reindents lines
set showmatch        " flashes matching brackets or parenthasis
set matchtime=3      " how long to flash brackets

" backups
set nobackup       " don't backup
set nowritebackup  " don't make backup before overwritting
set noswapfile     " fuck swapfiles
set directory=/tmp " dir for tmp files

" jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" info
set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

set numberwidth=5   " width of number column
set showmode        " shows vi mode in lower left
set cmdheight=1     " more room for error msgs
set scrolloff=4     " places a couple lines between the current line and the screen edge
set sidescrolloff=2 " places a couple lines between the current column and the screen edge
set laststatus=2    " status bar always visible
set ttyfast         " improve redrawing
set lazyredraw      " will not redraw the screen while running macros (goes faster)

if has('linebreak')
  try
    set breakindent             " visually indent wrapped lines
    let &showbreak='↳'
  catch /E518:/
    " Unknown option: breakindent
  endtry
endif

" menu compilation
set wildmenu                    " enhanced ed command completion
set wildignore+=*.~             " ignore compiled objects and backups
set wig+=*.o,*.obj,*.pyc
set wig+=.sass-cache,tmp
set wildmode=longest:full,list:full

" statusline config from -> http://stackoverflow.com/a/5380230/6744969
hi User1 ctermfg=16 ctermbg=234
hi User2 ctermfg=196 ctermbg=234
hi User3 ctermfg=171 ctermbg=234
hi User4 ctermfg=70 ctermbg=234
hi User5 ctermfg=226 ctermbg=234

" Gitgutter in statusline
function! GitStatus()
    return join(filter(map(['A','M','D'], {i,v -> v.': '.GitGutterGetHunkSummary()[i]}), 'v:val[-1:]'), ' ')
endfunction

set statusline+=%{GitStatus()}
set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%5*%{&ff}%*            "file format
set statusline +=%3*%y%*                "file type
set statusline +=%4*\ %<%F%*            "full path
set statusline +=%2*%m%*                "modified flag
set statusline +=%1*\ \|%{&fo}\|        "display format-options
set statusline +=%{FugitiveStatusline()} " git branch
set statusline+=%{GitStatus()}
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines
set statusline +=%1*%4v\ %*             "virtual column number
set statusline +=%2*0x%04B\ %*          "character under cursor

" keybindings to make life easier
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q

" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Set custom indent size
autocmd Filetype javascript setlocal ts=2 sw=2
autocmd Filetype vue setlocal ts=2 sw=2
autocmd Filetype yaml setlocal ts=2 sw=2
autocmd Filetype blade setlocal ts=2 sw=2

"
" plugs
"

" neomake
let g:neomake_open_list = 2 " open list automatically

" enable linters
call neomake#configure#automake('w', 500)

augroup my_neomake_qf
    autocmd!
    autocmd QuitPre * if &filetype !=# 'qf' | lclose | endif
augroup END

let g:neomake_python_enabled_makers = ['mypy', 'flake8']
augroup my_custom_maker
    au!
    au Filetype *.py let b:neomake_python_enabled_makers = ['mypy']
augroup END

"" vim-gitgutter
set updatetime=250                  " . The delay is governed by vim's updatetime option
let g:gitgutter_highlight_lines = 0 " highlight line

"" incsearch.vim
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

"" vim-easy align
" start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"" vim-markdown
let g:vim_markdown_folding_disabled = 1 " Disable folding

" Allow for TOC window to auto-fit when it's possible to it to shrink
let g:vim_markdown_toc_autofit = 1

" fenced code block
let g:vim_markdown_fenced_languages = ['c++=cpp', 'viml=vim', 'python=py', 'c=c']

" used as $x^2$, $$x^2$$, escapable as \$x\$ and \$\$x\$\$
let g:vim_markdown_math = 1

"" Rainbow Parentheses
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rainbow_active = 1
au BufRead,BufNewFile *.{md,txt} setlocal textwidth=80

" indentLine
let g:indentLine_setColors = 1

" disable preview window
set completeopt-=preview

" yank to clipboard
if has("clipboard")
  set clipboard=unnamed " copy to the system clipboard

  if has("unnamedplus") " X11 support
    set clipboard+=unnamedplus
  endif
endif

" python 2 and 3 server
let g:python_host_prog='/usr/bin/python2'
let g:python3_host_prog='/home/willian/.pyenv/shims/python3'

" True colors
if (has('nvim'))
  let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
endif

if (has('termguicolors'))
  set termguicolors
endif

let g:blamer_enabled = 0 " enable git blame

" Coc extensions
let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-prettier',
  \ 'coc-pairs',
  \ 'coc-eslint',
  \ 'coc-json',
  \ '@yaegassy/coc-intelephense',
  \ 'coc-clangd',
  \ 'coc-php-cs-fixer',
  \ 'coc-tsserver',
  \ 'coc-sql',
  \ 'coc-java',
  \ 'coc-calc',
  \ 'coc-elixir',
  \ 'coc-pyright',
  \ 'coc-rust-analyzer',
  "\ 'coc-ltex',
  "\ 'coc-reason',
  "\ 'coc-spell-checker',
  \ ]

" Show COC doc
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" ================ Keybindind and shortcuts ===============vimr

"if $XDG_SESSION_TYPE == 'x11'
    "" Copy to clipboard x11
    "vmap x "+c
    "vmap <C-c> "+y
    "vmap <C-x> "+c
    "vmap <C-v> c<ESC>"+p
    "imap <C-v> <ESC>"+pa
"else
    "" Copy to clipboard wayland
    "nnoremap <C-@> :call system("wl-copy", @")<cr>
    "xnoremap "+y y:call system("wl-copy", @")<cr>
    "nnoremap "+p :let @"=substitute(system("wl-paste --no-newline"), '<C-v><C-m>', '', 'g')<cr>p
    "nnoremap "*p :let @"=substitute(system("wl-paste --no-newline --primary"), '<C-v><C-m>', '', 'g')<cr>p
    ""xnoremap <silent> <C-x> y:call system("wl-copy", @") y:'<,'>d<cr>
    "xnoremap <silent> <C-c> y:call system("wl-copy", @")<cr>
    "nnoremap <silent> <C-v> :let @"=substitute(system("wl-paste --no-newline"), '<C-v><C-m>', '', 'g')<cr>p
"endif

map <C-S-r> :source ~/.vim/vimrc<cr>


" Move line Up or Down
xnoremap <S-A-k>   :<C-u>silent! '<,'>move-2<CR>gv=gv
nnoremap <S-A-k>   :<C-u>silent! move-2<CR>==
nnoremap <S-A-j> :<C-u>silent! move+<CR>==
xnoremap <S-A-j> :<C-u>silent! '<,'>move'>+<CR>gv=gv

nnoremap <silent> <S-Tab> :call <SID>show_documentation()<cr>
nnoremap <silent> <Esc><Esc> :noh<cr> :call clearmatches()<cr>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"

nmap <silent> <C-]> <Plug>(coc-definition)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nmap ++ <plug>NERDCommenterToggle
vmap ++ <plug>NERDCommenterToggle

nnoremap <leader>tt :tabnew<cr>
nnoremap <leader>tn :tabnext<cr>
nnoremap <leader>tp :tabprevious<cr>

map tt :tabnew<cr>
map tn :tabnext<cr>
map tp :tabprevious<cr>

xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

"Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
"Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)
"Mark file
nnoremap <leader>ha :<C-u>lua require("harpoon.mark").add_file()<cr>
"Show file picker
nnoremap <leader>hh :<C-u>lua require("harpoon.ui").toggle_quick_menu()<cr>
"Mark file
nnoremap <leader>hd :<C-u>lua require("harpoon.mark").rm_file()<cr>
"Use K to show documentation in preview window
nnoremap <silent> K :call  <SID>show_documentation()<cr>
"Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
"Show all diagnostics
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
"Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
"Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
"Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
"Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<cr>
"Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<cr>
"Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<cr>
" Remap for rename current word
nmap <F2> <Plug>(coc-rename)

" Auto switch theme based on gnome color scheme
let gnome_theme = system('gsettings get org.gnome.desktop.interface color-scheme')
let base16colorspace=256 " Access colors present in 256 colorspace

if stridx(gnome_theme, 'default') != -1
    set background=light
    colorscheme base16-github
else
    set background=dark
    colorscheme base16-gruvbox-dark-hard
end

" ================ Extra ===============

lua << EOF
require'lspconfig'.pyright.setup{}
require('telescope').setup{
  file_ignore_patterns = { "^./.git/", "^node_modules/", "^vendor/" }
}
require("telescope").load_extension('harpoon')
EOF

