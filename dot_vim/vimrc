" Willian de Souza
" some configs from:
" https://github.com/rstacruz/vim-opinion/

if has('python3')
  silent! python3 1
endif

source ~/.vim/plugins.vim " include plugs

" default file encoding and unicode
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set bomb                     " vim will put a 'byte order mark' (
                             " or BOM for short) at the start of Unicode files
set fileformats=unix,mac,dos " recognize file formats

set backspace=indent,eol,start " make backspace work like most other apps

" space > tabs
set autoindent
set smartindent
set smarttab
set shiftwidth=4
set tabstop=8
set softtabstop=0
set expandtab " insert space character when tab is pressed
set modelines=0
set expandtab " helps with backspacing because of expandtab
set textwidth=80

" options
" opening a new file when the current buffer has unsaved changes causes files " to be hidden instead of closed.
" The unsaved changes can still be accessed by typing :ls and then :b[N],
" where [N] is the number of a buffer
" see: http://usevim.com/2012/10/19/vim101-set-hidden/
set hidden         " don't care about closing modified buffers
set showcmd        " display incomplete commands
set history=50     " keep 50 lines of command line history
let mapleader=','  " use ',' as mapleader
set colorcolumn=80 " Color in column 80
set list listchars=tab:»·,trail:·,nbsp:· " Display extra whitespace
set cursorline     " find cursor faster.
set nowrap       "Don't wrap lines
set linebreak    "Wrap lines at convenient points

               " searching
set hlsearch   " highlight all search matches
set incsearch  " start searching when you type the first character of the search string
set ignorecase " searching is not case sensitive
set smartcase  " when 'ignorecase' and 'smartcase' are both on, if a
               " pattern contains an uppercase letter, it is case sensitive,
               " otherwise, it is not
set gdefault   " sub all matches in a line by default

set binary        " makes Vim more suitable for editing binary files
set shell=/bin/sh " use sh as default shell

" programming
syntax on
set cindent          " enables automatic indenting c-style
set cinoptions=l1,j1 " affects the way cindent reindents lines
set showmatch        " flashes matching brackets or parenthasis
set matchtime=3      " how long to flash brackets

" backups
set nobackup       " don't backup
set nowritebackup  " don't make backup before overwritting
set noswapfile     " fuck swapfiles
set directory=/tmp " dir for tmp files

" jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" info
set number relativenumber

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

set numberwidth=5   " width of number column
set showmode        " shows vi mode in lower left
set cmdheight=1     " more room for error msgs
set scrolloff=4     " places a couple lines between the current line and the screen edge
set sidescrolloff=2 " places a couple lines between the current column and the screen edge
set laststatus=2    " status bar always visible
set ttyfast         " improve redrawing
set lazyredraw      " will not redraw the screen while running macros (goes faster)

if has('linebreak')
  try
    set breakindent             " visually indent wrapped lines
    let &showbreak='↳'
  catch /E518:/
    " Unknown option: breakindent
  endtry
endif

" menu compilation
set wildmenu                    " enhanced ed command completion
set wildignore+=*.~             " ignore compiled objects and backups
set wig+=*.o,*.obj,*.pyc
set wig+=.sass-cache,tmp
set wildmode=longest:full,list:full

" disable newtr banner I to tmp enable
let g:netrw_banner = 0

" statusline config from -> http://stackoverflow.com/a/5380230/6744969
hi User1 ctermfg=16 ctermbg=234
hi User2 ctermfg=196 ctermbg=234
hi User3 ctermfg=171 ctermbg=234
hi User4 ctermfg=70 ctermbg=234
hi User5 ctermfg=226 ctermbg=234

" Gitgutter in statusline
function! GitStatus()
    return join(filter(map(['A','M','D'], {i,v -> v.': '.GitGutterGetHunkSummary()[i]}), 'v:val[-1:]'), ' ')
endfunction

set statusline+=%{GitStatus()}
set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%5*%{&ff}%*            "file format
set statusline +=%3*%y%*                "file type
set statusline +=%4*\ %<%F%*            "full path
set statusline +=%2*%m%*                "modified flag
set statusline +=%1*\ \|%{&fo}\|        "display format-options
set statusline +=%{FugitiveStatusline()} " git branch
set statusline +=%{GitStatus()}
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines
set statusline +=%1*%4v\ %*             "virtual column number
set statusline +=%2*0x%04B\ %*          "character under cursor

" keybindings to make life easier
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q

nnoremap <C-u> <C-u>zz
nnoremap <C-d> <C-d>zz
nnoremap { {zz
nnoremap } }zz
nnoremap N Nzz
nnoremap n nzz
nnoremap gg ggzz
nnoremap <C-i> <C-i>zz
nnoremap <C-o> <C-o>zz
nnoremap % %zz
nnoremap * *zz
nnoremap # #zz

" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Set custom indent size
autocmd Filetype javascript setlocal ts=2 sw=2
autocmd Filetype vue setlocal ts=2 sw=2
autocmd Filetype yaml setlocal ts=2 sw=2
autocmd Filetype blade setlocal ts=2 sw=2

"
" plugs
"

" Copilot: disable by default
let g:copilot_enabled = 0

"" vim-gitgutter
set updatetime=250                  " . The delay is governed by vim's updatetime option
let g:gitgutter_highlight_lines = 0 " highlight line

"" vim-markdown
let g:vim_markdown_folding_disabled = 1 " Disable folding

" Allow for TOC window to auto-fit when it's possible to it to shrink
let g:vim_markdown_toc_autofit = 1

" fenced code block
let g:vim_markdown_fenced_languages = ['c++=cpp', 'viml=vim', 'python=py', 'c=c']

" used as $x^2$, $$x^2$$, escapable as \$x\$ and \$\$x\$\$
let g:vim_markdown_math = 1

" Disable ruby provider
let g:loaded_ruby_provider = 0

" Disable pearl provider
let g:loaded_perl_provider = 0

"" Rainbow Parentheses
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rainbow_active = 1
au BufRead,BufNewFile *.{md,txt} setlocal textwidth=80

" indentLine
let g:indentLine_setColors = 1

" disable preview window
set completeopt-=preview

" yank to clipboard
if has("clipboard")
  set clipboard=unnamed " copy to the system clipboard

  if has("unnamedplus") " X11 support
    set clipboard+=unnamedplus
  endif
endif

" python 2 and 3 server
let g:python_host_prog='/usr/bin/python2'
let g:python3_host_prog='/home/willian/.pyenv/shims/python3'

" True colors
if (has('nvim'))
  let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
endif

if (has('termguicolors'))
  set termguicolors
endif

let g:blamer_enabled = 0 " enable git blame

" Move line Up or Down
xnoremap <S-A-k>   :<C-u>silent! '<,'>move-2<CR>gv=gv
nnoremap <S-A-k>   :<C-u>silent! move-2<CR>==
nnoremap <S-A-j> :<C-u>silent! move+<CR>==
xnoremap <S-A-j> :<C-u>silent! '<,'>move'>+<CR>gv=gv

nnoremap <silent> <Esc><Esc> :noh<cr> :call clearmatches()<cr>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <leader>sf <cmd>Telescope find_files<cr>
nnoremap <leader>sh <cmd>Telescope help_tags<cr>
nnoremap <leader>sw <cmd>Telescope grep_string<cr>
nnoremap <leader>sg <cmd>Telescope live_grep<cr>
nnoremap <leader>sb <cmd>Telescope buffers<cr>
nnoremap <leader>/ <cmd>Telescope current_buffer_fuzzy_find<cr>

nnoremap <leader>fs <cmd>Explore<cr>

nnoremap ++ <plug>NERDCommenterToggle
vnoremap ++ <plug>NERDCommenterToggle

nnoremap <leader>tt :tabnew<cr>
nnoremap <leader>tn :tabnext<cr>
nnoremap <leader>tp :tabprevious<cr>

nnoremap tt :tabnew<cr>
nnoremap tn :tabnext<cr>
nnoremap tp :tabprevious<cr>

nnoremap <leader>sv <cmd>vsplit<cr>
nnoremap <leader>sh <cmd>split<cr>

" Delete without yank
vnoremap D "_dd<esc>

"Mark file
nnoremap <leader>ha :<C-u>lua require("harpoon.mark").add_file()<cr>
"Show file picker
nnoremap <leader>hh :<C-u>lua require("harpoon.ui").toggle_quick_menu()<cr>
"Mark file
nnoremap <leader>hd :<C-u>lua require("harpoon.mark").rm_file()<cr>

" Auto switch theme based on gnome color scheme
let gnome_theme = system('gsettings get org.gnome.desktop.interface color-scheme')
let base16colorspace=256 " Access colors present in 256 colorspace

if stridx(gnome_theme, 'default') != -1
    set background=light
    colorscheme base16-github
else
    set background=dark
    colorscheme base16-gruvbox-dark-hard
end

" ================ Extra ===============

lua << EOF
require('telescope').setup{
    defaults = {
        file_ignore_patterns = {".git", "node_modules", "vendor"}
    }
}

require("telescope").load_extension('harpoon')

require("mason").setup()
require("mason-lspconfig").setup()

local luasnip = require("luasnip")
local cmp = require("cmp")
local lspkind = require("lspkind")

cmp.setup({
	formatting = {
		format = lspkind.cmp_format({
			with_text = true, -- do not show text alongside icons
			maxwidth = 50, -- prevent the popup from showing more than provided characters (e.g 50 will not show more than 50 characters)

			-- The function below will be called before any actual modifications from lspkind
			-- so that you can provide more controls on popup customization. (See [#30](https://github.com/onsails/lspkind-nvim/pull/30))
			before = function(entry, vim_item)
				return vim_item
			end,
		}),
	},

	snippet = {
		expand = function(args)
			require("luasnip").lsp_expand(args.body)
		end,
	},
	mapping = {
		["<C-p>"] = cmp.mapping.select_prev_item(),
		["<C-n>"] = cmp.mapping.select_next_item(),
		["<C-d>"] = cmp.mapping.scroll_docs(-4),
		["<C-f>"] = cmp.mapping.scroll_docs(4),
		["<C-Space>"] = cmp.mapping.complete(),
		["<C-e>"] = cmp.mapping.close(),
		["<CR>"] = cmp.mapping.confirm({
			behavior = cmp.ConfirmBehavior.Replace,
			select = true,
		}),
	},
	sources = {
		{ name = "nvim_lsp" },
		{ name = "luasnip" },
		{ name = "neorg" },
	},
})

local on_attach = function(client, bufnr)
	local function buf_set_keymap(...)
		vim.api.nvim_buf_set_keymap(bufnr, ...)
	end
	local function buf_set_option(...)
		vim.api.nvim_buf_set_option(bufnr, ...)
	end

	buf_set_option("omnifunc", "v:lua.vim.lsp.omnifunc")

	local opts = { noremap = true, silent = true }

	buf_set_keymap("n", "gd", ":lua vim.lsp.buf.definition()<CR>", opts) --> jumps to the definition of the symbol under the cursor
	buf_set_keymap("n", "K", ":lua vim.lsp.buf.hover()<CR>", opts) --> information about the symbol under the cursos in a floating window
	buf_set_keymap("n", "gi", ":lua vim.lsp.buf.implementation()<CR>", opts) --> lists all the implementations for the symbol under the cursor in the quickfix window
	buf_set_keymap("n", "<leader>rn", ":lua vim.lsp.util.rename()<CR>", opts) --> renaname old_fname to new_fname
	buf_set_keymap("n", "<leader>ca", ":lua vim.lsp.buf.code_action()<CR>", opts) --> selects a code action available at the current cursor position
	buf_set_keymap("n", "gr", ":lua vim.lsp.buf.references()<CR>", opts) --> lists all the references to the symbl under the cursor in the quickfix window
	buf_set_keymap("n", "<leader>ld", ":lua vim.diagnostic.open_float()<CR>", opts)
	buf_set_keymap("n", "[d", ":lua vim.diagnostic.goto_prev()<CR>", opts)
	buf_set_keymap("n", "]d", ":lua vim.diagnostic.goto_next()<CR>", opts)
	buf_set_keymap("n", "<leader>lq", ":lua vim.diagnostic.setloclist()<CR>", opts)
	buf_set_keymap("n", "<leader>lf", ":lua vim.lsp.buf.formatting()<CR>", opts) --> formats the current buffer
end

root_dir = function(fname)
    return vim.fn.getcwd()
end

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require("cmp_nvim_lsp").default_capabilities(capabilities)
local nvim_lsp = require('lspconfig')

local servers = {'intelephense', 'jdtls', 'tsserver', 'lua_ls', 'sqlls'}

for _, lsp in ipairs(servers) do
    nvim_lsp[lsp].setup({
            on_attach = on_attach,
            capabilities = capabilities,
            root_dir = function(fname)
                return nvim_lsp.util.root_pattern(
                    'build.gradle', 'pom.xml', '.git'
                )(fname) or vim.fn.getcwd()
            end,
    })
end

-- Vue lsp cant be on above array...
nvim_lsp['vls'].setup({
        on_attach = on_attach,
        capabilities = capabilities,
        root_dir = function(fname)
            return nvim_lsp.util.root_pattern(
                'build.gradle', 'pom.xml', '.git'
            )(fname) or vim.fn.getcwd()
        end,
        filetypes = {'vue'},
        cmd = {'vls'}
})


require('nvim-treesitter.configs').setup({
  ensure_installed = { 'vimdoc', 'vim', 'php' },
  auto_install = false,
  highlight = { enable = true },
  indent = { enable = true },
  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = '<c-space>',
      node_incremental = '<c-space>',
      scope_incremental = '<c-s>',
      node_decremental = '<M-space>',
    },
  },
  textobjects = {
    select = {
      enable = true,
      lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
      keymaps = {
        -- You can use the capture groups defined in textobjects.scm
        ['aa'] = '@parameter.outer',
        ['ia'] = '@parameter.inner',
        ['af'] = '@function.outer',
        ['if'] = '@function.inner',
        ['ac'] = '@class.outer',
        ['ic'] = '@class.inner',
      },
    },
    move = {
      enable = true,
      set_jumps = true, -- whether to set jumps in the jumplist
      goto_next_start = {
        [']m'] = '@function.outer',
        [']]'] = '@class.outer',
      },
      goto_next_end = {
        [']M'] = '@function.outer',
        [']['] = '@class.outer',
      },
      goto_previous_start = {
        ['[m'] = '@function.outer',
        ['[['] = '@class.outer',
      },
      goto_previous_end = {
        ['[M'] = '@function.outer',
        ['[]'] = '@class.outer',
      },
    },
    swap = {
      enable = true,
      swap_next = {
        ['<leader>a'] = '@parameter.inner',
      },
      swap_previous = {
        ['<leader>A'] = '@parameter.inner',
      },
    },
  },
  playground = {
    enable = true,
    disable = {},
    updatetime = 25,
    persist_queries = false,
    keybindings = {
      toggle_query_editor = 'o',
      toggle_hl_groups = 'i',
      toggle_injected_languages = 't',
      toggle_anonymous_nodes = 'a',
      toggle_language_display = 'I',
      focus_language = 'f',
      unfocus_language = 'F',
      update = 'R',
      goto_node = '<cr>',
      show_help = '?',
    },
  }
})
EOF
