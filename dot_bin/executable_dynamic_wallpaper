#!/usr/bin/env python

import argparse
from fuzzywuzzy import fuzz
from importlib.metadata import version
import os
import random
import time as timer
import xml.etree.ElementTree as ET

from datetime import datetime, date, time, timedelta

def set_wallpaper(path):
    path = path.replace(" ", "\\ ")
    print("Setting wallpaper: " + path)
    os.system("feh " + args.feh_arguments + " " + path + " 2>/dev/null")

def get_wallpapers():
    print("Getting wallpapers")
    wallpapers = os.popen("find " + args.base_directory + " -type f -name '*.xml' 2>/dev/null").read().split("\n")
    return wallpapers

def pick_wallpaper(wallpapers, name):
    if (name ==  None):
        print("Picking random wallpaper")
        return random.choice(wallpapers)

    weight = 0;
    chosen = None;

    for wallpaper in wallpapers:
        ratio = fuzz.ratio(name, wallpaper)
        if (ratio > weight):
            weight = ratio
            chosen = wallpaper

    print("Picking wallpaper with name like " + name)
    return chosen

def handle_wallpaper(wallpaper_xml):
    print("Handling wallpaper: " + wallpaper_xml)
    background = ET.parse(wallpaper_xml).getroot()
    time_start = background.find("starttime")

    d = date.today()
    t = time(int(time_start.find("hour").text), int(time_start.find("minute").text), int(time_start.find("second").text))
    start_time = datetime.combine(d, t)

    print("Reference start time: " + str(start_time))

    for child in background:
        if child.tag == "static":
            duration = child.find("duration").text
            from_path = child.find("file").text
            to_path = None
        elif child.tag == "transition":
            duration = child.find("duration").text
            from_path = child.find("from").text
            to_path = child.find("to").text
        else:
            continue

        now = datetime.now()
        start_time += timedelta(seconds=float(duration))
        diff_seconds = (start_time-now).total_seconds()

        print("From: " + from_path)
        print("Now: " + str(now))
        print("Node start time: " + str(start_time))
        print("Diff: " + str(diff_seconds))
        print("\n")

        if (diff_seconds <= 0):
            continue

        if (to_path != None):
            set_wallpaper(from_path)
            print("Duration: " + str(diff_seconds/2))
            timer.sleep(float(diff_seconds)/2)

            set_wallpaper(to_path)
            print("Duration: " + str(diff_seconds/2))
            timer.sleep(float(diff_seconds)/2)
            continue

        set_wallpaper(from_path)
        print("Duration: " + str(diff_seconds))
        timer.sleep(float(diff_seconds))

def ensure_required_binaries_are_installed():
    has_find = os.popen("command -v find 2>/dev/null").read()
    has_feh = os.popen("command -v feh 2>/dev/null").read()

    if (has_find == ''):
        print("Please install find before run this program.")

    if (has_feh == ''):
        print("Please install feh before run this program.")

def ensure_required_python_deps():
    try:
        version('python-Levenshtein')
    except:
        print('Missing python-Levenshtein dep')
        exit(1)

def main():
    wallpapers = get_wallpapers()

    if len(wallpapers) == 1 and wallpapers[0] == "":
        print("No dynamic wallpapers found")
        exit(0)

    while True:
        wallpaper_xml = pick_wallpaper(wallpapers, args.name)
        print(wallpaper_xml)
        handle_wallpaper(wallpaper_xml)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Handle xml dynamic wallpapers")

    parser.add_argument(
        "--feh-arguments",
        type=str,
        default="--randomize --bg-fill",
        help="Specific arguments to feh"
    )

    parser.add_argument(
        "--base-directory",
        type=str,
        default="/usr/share/backgrounds",
        help="Path with xml files"
    )

    parser.add_argument(
        "--name",
        type=str,
        default=None,
        help="Name of wallpaper to be searched in list"
    )

    args = parser.parse_args()

    ensure_required_binaries_are_installed()
    ensure_required_python_deps()
    main()
